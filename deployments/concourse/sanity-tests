#!/usr/bin/env bash

set -eo pipefail

function main() {
    setup

    # Global variables, so that the cleanup() exit function can access these:
    concourse_target=${1:-"ef"}
    pipeline_name=self-sanity-tests

    if [[ -n "${DEBUG}" ]]; then set -x; fi

    (
        set +e
        if (set -x ; fly --target="${concourse_target}" status); then
            echo "${GREEN}${BOLD}OK${RESET}"
        else
            bash ${DEBUG:+"-x"} "${SUBSYS_DIR}/fly-login" "${concourse_target}"
        fi
    )

    local shell_opts  initial_xtrace
    shell_opts="$-"
    initial_xtrace=$(tr -Cd "x" <<< "${shell_opts}")
    if [[ -n "${initial_xtrace}" ]]; then set +x; fi

    source <("${SUBSYS_DIR}/credhub-env")

    if [[ -n "${initial_xtrace}" ]]; then set -x; fi

    local secrets_found
    secrets_found=$(set -x ;
        credhub find --output-json \
            | jq --raw-output '.credentials | length'
    )
    echo "${GREEN}${BOLD}OK${RESET}: ${secrets_found} secrets found"

    trap cleanup EXIT

    invoke credhub set --name="/concourse/main/team-var"                      --type="value" --value="plip"
    invoke credhub set --name="/concourse/main/${pipeline_name}/pipeline-var" --type="value" --value="plop"

    invoke credhub get --name="/concourse/main/team-var"
    invoke credhub get --name="/concourse/main/${pipeline_name}/pipeline-var"

    redact_value credhub set --name="/concourse/main/${pipeline_name}/harbor-admin-password" --type="value" \
        --value="$(harbor_creds_var "/harbor_admin_password")"
    redact_value credhub set --name="/concourse/main/${pipeline_name}/credhub-ca-cert"       --type="value" \
        --value="${CREDHUB_CA_CERT}"
    redact_value credhub set --name="/concourse/main/${pipeline_name}/credhub-secret"        --type="value" \
        --value="${CREDHUB_SECRET}"

    local external_domain  harbor_fqdn
    external_domain=$(priv_cfg_var "/external_domain")
    harbor_fqdn="harbor.${external_domain}"
    invoke fly --target="${concourse_target}" set-pipeline --non-interactive \
        --pipeline="${pipeline_name}" \
        --config=<(pipeline_definition) \
        --var="registry_prefix=${harbor_fqdn}/" \
        --var="credhub_fqdn=credhub.${external_domain}" \
        --var="credhub_server=${CREDHUB_SERVER}" \
        --var="credhub_client=${CREDHUB_CLIENT}"

    invoke fly --target="${concourse_target}" unpause-pipeline \
        --pipeline="${pipeline_name}"

    (
        set -x
        fly --target="${concourse_target}" trigger-job --watch \
            --job="${pipeline_name}/test-job"
    )
}

function setup() {
    SUBSYS_DIR=${SUBSYS_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}
    BASE_DIR=${BASE_DIR:-$(cd "${SUBSYS_DIR}" && git rev-parse --show-toplevel)}
    readonly SUBSYS_DIR BASE_DIR

    BOLD=$(tput bold)
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    RESET=$(tput sgr0)
    readonly BOLD RED GREEN RESET
}

function cleanup() {
    if [[ -z "${concourse_target}" || -z "${pipeline_name}" ]]; then
        echo "${RED}${BOLD}ERROR${RESET}: missing 'concourse_target' or 'pipeline_name' info for proper cleanup." \
            "Aborting cleanup."
        return
    fi
    echo "Cleaning up"
    (
        set +x
        fly --target="${concourse_target}" destroy-pipeline --non-interactive --pipeline="${pipeline_name}" > /dev/null

        credhub delete --name="/concourse/main/team-var"
        credhub delete --name="/concourse/main/${pipeline_name}/pipeline-var"
        credhub delete --name="/concourse/main/${pipeline_name}/harbor-admin-password"
        credhub delete --name="/concourse/main/${pipeline_name}/credhub-ca-cert"
    )
    echo "${GREEN}${BOLD}OK${RESET}"
}

function pipeline_definition() {
    cat <<'EOF'
---
resources:
  - name: test-resource
    type: time
    source:
      interval: 1m

  - name: test-image
    type: docker-image
    source:
      repository: ((registry_prefix))gstack/gk-ops
      username: admin
      password: ((harbor-admin-password))

jobs:
  - name: test-job
    plan:
      - get: test-resource
      - get: test-image
      - task: test-task
        image: test-image
        config:
          platform: linux
          params:
            TEAM_VAR:        ((team-var))
            PIPELINE_VAR:    ((pipeline-var))
            CREDHUB_SERVER:  ((credhub_server))
            CREDHUB_CA_CERT: ((credhub-ca-cert))
            CREDHUB_CLIENT:  ((credhub_client))
            CREDHUB_SECRET:  ((credhub-secret))
          run:
            path: bash
            args:
              - -ec
              - |
                export TERM=xterm-256color
                error=0
                if [[ "${TEAM_VAR}" != "plip" ]]; then
                    echo >&2 "$(tput setaf 1)$(tput smso)ERROR:$(tput rmso) expected the 'team-var' variable value '((team-var))' to be 'plip'$(tput sgr0)"
                    error=$(( $error + 1 ))
                fi
                if [[ "${PIPELINE_VAR}" != "plop" ]]; then
                    echo >&2 "$(tput setaf 1)$(tput smso)ERROR:$(tput rmso) expected the 'pipeline-var' variable value '((pipeline-var))' to be 'plop'$(tput sgr0)"
                    error=$(( $error + 1 ))
                fi
                if [[ "${error}" -gt 0 ]]; then
                    exit 1
                fi
                (
                    set -x
                    host ((credhub_fqdn))
                    credhub api       # checks connectivity from workers to Credhub
                    credhub --version
                )
                echo "$(tput setaf 5)$(tput bold)Concourse rocks"\!"$(tput sgr0)"
EOF
}

function invoke() {
    local output
    output=$(set -x ; "$@")
    if [[ $? -eq 0 ]]; then
        echo "${GREEN}${BOLD}OK${RESET}"
    else
        echo "${GREEN}${BOLD}FAILED${RESET}"
        echo "${output}"
    fi
}

function redact_value() {
    local output
    echo >&2 "+ ${@/#--value=*/--value=<REDACTED>}"
    output=$(set +x ; "$@")
    if [[ $? -eq 0 ]]; then
        echo "${GREEN}${BOLD}OK${RESET}"
    else
        echo "${GREEN}${BOLD}FAILED${RESET} with output:"
        echo "${output}"
    fi
}

function priv_cfg_var() {
    local path=$1
    bosh interpolate "${SUBSYS_DIR}/conf/private-config.yml" --path="${path}"
}

function state_var() {
    local state_file=$1
    local path=$2
    bosh interpolate "${BASE_DIR}/state/${SUBSYS_NAME}/${state_file}.yml" --path="${path}"
}

function harbor_creds_var() {
    SUBSYS_NAME="harbor" state_var "depl-creds" "$1"
}

main "$@"
