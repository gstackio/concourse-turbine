---

# ----------- #
# Internal CA #
# ----------- #

- path: /variables/name=concourse-internal-ca?
  type: replace
  value:
    name: concourse-internal-ca
    type: certificate
    options:
      is_ca: true
      common_name: Concourse internal CA
    update_mode: converge



# ------------------------------------------------ #
# BOSH addons: BPM, DNS Aliases & Database CA cert #
# ------------------------------------------------ #

- path: /releases/name=bpm?
  type: replace
  value:
    name: bpm
    version: ((bpm_version))
    url: https://bosh.io/d/github.com/cloudfoundry/bpm-release?v=((bpm_version))
    sha1: ((bpm_sha1))

- path: /releases/name=os-conf?
  type: replace
  value:
    name: os-conf
    version: ((os_conf_version))
    url: https://bosh.io/d/github.com/cloudfoundry/os-conf-release?v=((os_conf_version))
    sha1: ((os_conf_sha1))

- path: /addons?/name=bpm
  type: replace
  value:
    name: bpm
    include:
      instance_groups:
        - uaa
        - credhub
    jobs:
      - name: bpm
        release: bpm

- path: /addons/name=trusted-ca-certs?
  type: replace
  value:
    name: trusted-ca-certs
    include:
      instance_groups:
        - uaa
        - credhub
        - web
        # Note: enforcing trust of the Concourse CA at the system level
        # doesn't have Concourse tasks containers trust the CA, though.
        - worker
    jobs:
      - name: ca_certs
        release: os-conf
        properties:
          certs: |
            ((concourse-internal-ca.certificate))



# ------------------------ #
# Instance groups ordering #
# ------------------------ #

- path: /instance_groups/name=db:after
  type: replace
  value:
    name: uaa
    instances: 1
    azs: ((azs))
    networks: [ { name: ((network_name)) } ]
    stemcell: bionic
    vm_type: default

- path: /instance_groups/name=uaa:after
  type: replace
  value:
    name: credhub
    instances: 1
    azs: ((azs))
    networks: [ { name: ((network_name)) } ]
    stemcell: bionic
    vm_type: default



# ------- #
# CredHub #
# ------- #

- path: /releases/name=credhub?
  type: replace
  value:
    name: credhub
    version: ((credhub_version))
    url: https://bosh.io/d/github.com/pivotal-cf/credhub-release?v=((credhub_version))
    sha1: ((credhub_sha1))

- path: /instance_groups/name=credhub/jobs?/name=credhub
  type: replace
  value:
    name: credhub
    release: credhub
    provides:
      credhub-address:
        aliases:
          - domain: ((credhub_external_fqdn))
            health_filter: smart
    custom_provider_definitions:
      - name: credhub-address
        type: address
    properties:
      bpm: { enabled: true }
      credhub:
        port: ((credhub_tls_port)) # explicit that value for the glue below to stick
        tls: ((credhub-tls))
        internal_url: ((credhub_external_fqdn)) # this is for other instance groups to auto-configure through the 'credhub' BOSH link
        ca_certificate: ((credhub-tls.ca))      # this is for other instance groups to auto-configure through the 'credhub' BOSH link
        authentication:
          uaa:
            enabled: true
            url: https://((uaa_external_fqdn))
            internal_url: https://((uaa_external_fqdn)):((uaa_tls_port))
            ca_certs:
              - ((uaa-tls.ca))
        data_storage:
          type: postgres
          username: &credhub_db_username credhub
          password: &credhub_db_password ((credhub-database-password))
          database: &credhub_db_name credhub
        encryption:
          keys:
            - provider_name: internal_encrypter
              key_properties:
                encryption_password: ((credhub-encryption-password))
              active: true
          providers:
            - name: internal_encrypter
              type: internal
        log_level: ((log_level))
        max_heap_size: 384

- path: /instance_groups/name=credhub/update?/canary_watch_time
  type: replace
  value: 10000-120000

- path: /instance_groups/name=credhub/update?/update_watch_time
  type: replace
  value: 10000-120000

- path: /instance_groups/name=credhub/jobs/name=traefik?
  type: replace
  value:
    name: traefik
    release: traefik
    properties:
      bpm:
        enabled: true
      traefik:
        tls:
          cert: ((credhub-tls))
        accept_invalid_backend_certificates: false
        http: { enabled: false }
        access_logs: { enabled: true }
        file:
          enabled: true
          watch: true
          rules: |
            [backends]
              [backends.credhub-tls-backend.servers.credhub0-tls]
              url = "https://((credhub_external_fqdn)):((credhub_tls_port))"

            [frontends]
              [frontends.credhub-tls-frontend]
              entrypoints = [ "https" ]
              backend = "credhub-tls-backend"
              passHostHeader = true
                [frontends.credhub-tls-frontend.routes.credhub-main]
                rule = "Host: ((credhub_external_fqdn))"



- path: /instance_groups/name=db/jobs/name=postgres/properties/databases/databases/-
  type: replace
  value:
    name: *credhub_db_name

- path: /instance_groups/name=db/jobs/name=postgres/properties/databases/roles/-
  type: replace
  value:
    name: *credhub_db_username
    password: *credhub_db_password


- path: /variables/name=credhub-tls?
  type: replace
  value:
    name: credhub-tls
    type: certificate
    options:
      ca: concourse-internal-ca
      common_name: ((credhub_external_fqdn))
      alternative_names:
        - ((credhub_external_fqdn))
    update_mode: converge

- path: /variables/name=credhub-database-password?
  type: replace
  value:
    name: credhub-database-password
    type: password

- path: /variables/name=credhub-encryption-password?
  type: replace
  value:
    name: credhub-encryption-password
    type: password



# --- #
# UAA #
# --- #

- path: /releases/name=uaa?
  type: replace
  value:
    name: uaa
    version: ((uaa_version))
    url: https://bosh.io/d/github.com/cloudfoundry/uaa-release?v=((uaa_version))
    sha1: ((uaa_sha1))

- path: /instance_groups/name=uaa/jobs?/name=uaa
  type: replace
  value:
    name: uaa
    release: uaa
    provides:
      uaa-address:
        aliases:
          - domain: ((uaa_external_fqdn))
            health_filter: smart
          - domain: ((login_external_fqdn))
            health_filter: smart
    custom_provider_definitions:
      - name: uaa-address
        type: address
    consumes:
      database: { from: postgres }
    properties:
      bpm: { enabled: false } # conflicts with the '/home/vcap/.postgresql/root.crt' workaround below
      uaa:
        url: https://((uaa_external_fqdn))
        ssl:
          port: ((uaa_tls_port)) # explicit that value for the glue below to stick
        catalina_opts: "-Djava.security.egd=file:/dev/./urandom -Xms384m -Xmx384m -XX:MaxMetaspaceSize=256m"
        scim:
          users:
            - name: admin
              password: ((uaa-admin-user-password))
              groups:
                - scim.write
                - scim.read
                - credhub.read
                - credhub.write
        user:
          # Reduce the list of default authorities/scopes/groups assigned to
          # all users:
          authorities:
            - openid
            - scim.me
            # - cloud_controller.read
            # - cloud_controller.write
            # - cloud_controller_service_permissions.read
            - password.write
            - uaa.user
            - approvals.me
            - oauth.approvals
            # - notification_preferences.read
            # - notification_preferences.write
            - profile
            - roles
            - user_attributes
            - uaa.offline_token
        admin: { client_secret: ((uaa-admin-client-secret)) }
        login: { client_secret: ((uaa-login-client-secret)) }
        zones: { internal: { hostnames: [ ((uaa_external_fqdn)) ] } }
        sslCertificate: ((uaa-tls.certificate))
        sslPrivateKey: ((uaa-tls.private_key))
        jwt:
          revocable: true
          policy:
            active_key_id: key-1
            keys:
              key-1:
                signingKey: ((uaa-jwt-signing-key.private_key))
          refresh:
            format: opaque
        logging_level: ((log_level))
      uaadb:
        port: 5432
        db_scheme: postgresql
        databases:
          - tag: uaa
            name: &uaa_db_name uaa
        roles:
          - tag: admin
            name: &uaa_db_username uaa
            password: ((uaa-db-password))
      login:
        saml:
          serviceProviderCertificate: ((uaa-tls.certificate))
          serviceProviderKey: ((uaa-tls.private_key))
          serviceProviderKeyPassword: ""
      encryption:
        active_key_label: encryption_key1
        encryption_keys:
          - label: encryption_key1
            passphrase: ((uaa-encryption-passphrase))

- path: /instance_groups/name=uaa/update?/canary_watch_time
  type: replace
  value: 10000-120000

- path: /instance_groups/name=uaa/update?/update_watch_time
  type: replace
  value: 10000-120000


- path: /releases/name=traefik?
  type: replace
  value:
    name: traefik
    version: ((traefik_version))
    url: https://github.com/gstackio/traefik-boshrelease/releases/download/v((traefik_version))/traefik-((traefik_version)).tgz
    sha1: ((traefik_sha1))

- path: /instance_groups/name=uaa/jobs/name=traefik?
  type: replace
  value:
    name: traefik
    release: traefik
    properties:
      bpm:
        enabled: true
      traefik:
        tls:
          cert: ((uaa-tls))
        accept_invalid_backend_certificates: false
        http: { enabled: false }
        access_logs: { enabled: true }
        file:
          enabled: true
          watch: true
          rules: |
            [backends]
              [backends.uaa-tls-backend.servers.uaa0-tls]
              url = "https://((uaa_external_fqdn)):((uaa_tls_port))"

            [frontends]
              [frontends.uaa-tls-frontend]
              entrypoints = [ "https" ]
              backend = "uaa-tls-backend"
              passHostHeader = true
                [frontends.uaa-tls-frontend.routes.uaa-main]
                rule = "Host: ((uaa_external_fqdn)),((login_external_fqdn))"



- path: /instance_groups/name=db/jobs/name=postgres/properties/databases/databases/-
  type: replace
  value:
    name: *uaa_db_name

- path: /instance_groups/name=db/jobs/name=postgres/properties/databases/roles/-
  type: replace
  value:
    name: *uaa_db_username
    password: ((uaa-db-password))


- path: /variables/name=uaa-admin-user-password?
  type: replace
  value:
    name: uaa-admin-user-password
    type: password

- path: /variables/name=uaa-jwt-signing-key?
  type: replace
  value:
    name: uaa-jwt-signing-key
    type: rsa
    options:
      key_length: 4096

- path: /variables/name=uaa-tls?
  type: replace
  value:
    name: uaa-tls
    type: certificate
    options:
      ca: concourse-internal-ca
      common_name: ((uaa_external_fqdn))
      alternative_names:
        - ((uaa_external_fqdn))
        - ((login_external_fqdn))
    update_mode: converge

- path: /variables/name=uaa-admin-client-secret?
  type: replace
  value:
    name: uaa-admin-client-secret
    type: password

- path: /variables/name=uaa-login-client-secret?
  type: replace
  value:
    name: uaa-login-client-secret
    type: password

- path: /variables/name=uaa-db-password?
  type: replace
  value:
    name: uaa-db-password
    type: password

- path: /variables/name=uaa-encryption-passphrase?
  type: replace
  value:
    name: uaa-encryption-passphrase
    type: password



# --------------------------- #
# UAA integration for CredHub #
# --------------------------- #

- path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaa/clients?/credhub_cli
  type: replace
  value:
    override: true
    authorized-grant-types: password,refresh_token
    scope: credhub.read,credhub.write
    authorities: uaa.resource
    access-token-validity: 600
    refresh-token-validity: 3600
    secret: ""

- path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaa/clients?/credhub-admin
  type: replace
  value:
    override: true
    authorized-grant-types: client_credentials
    scope: ""
    authorities: credhub.read,credhub.write
    access-token-validity: 600
    access-token-validity: 3600
    secret: ((credhub-admin-client-secret))

- path: /instance_groups/name=credhub/jobs/name=credhub/properties/credhub/authorization?/permissions/-
  type: replace
  value:
    path: /*
    actors:
      - uaa-user:credhub_cli
      - uaa-client:credhub-admin
    operations: [ read, write, delete, read_acl, write_acl ]

- path: /variables/name=credhub-admin-client-secret?
  type: replace
  value:
    name: credhub-admin-client-secret
    type: password



# --------------------------------- #
# CredHub integration for Concourse #
# --------------------------------- #

# From turbo <https://github.com/pivotalservices/turbo/blob/master/deployments/ucc/manifest/manifest.yml#L68-L76>
- path: /instance_groups/name=web/jobs/name=web/properties/credhub?
  type: replace
  value:
    path_prefix: /concourse
    url: https://((credhub_external_fqdn)):((credhub_tls_port))
    tls:
      ca_cert:
        certificate: ((concourse-internal-ca.certificate))
      insecure_skip_verify: false
    client_id: concourse-to-credhub
    client_secret: ((concourse-to-credhub-client-secret))

# From turbo <https://github.com/pivotalservices/turbo/blob/master/deployments/ucc/manifest/manifest.yml#L137-L145>
# From BUCC <https://github.com/starkandwayne/bucc/blob/master/ops/4-concourse-credhub.yml#L12-L20>
- path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaa/clients/concourse-to-credhub?
  type: replace
  value:
    override: true
    authorized-grant-types: client_credentials,password,refresh_token
    scope: ""
    # NOTE: surprisingly, the 'credhub.write' is necessary here, or we get this error:
    # failed to interpolate task config: Finding variable '...': insufficient_scope: Insufficient scope for this resource
    authorities: credhub.read,credhub.write
    access-token-validity: 600
    refresh-token-validity: 3600
    secret: ((concourse-to-credhub-client-secret))

- path: /instance_groups/name=credhub/jobs/name=credhub/properties/credhub/authorization/permissions/-
  type: replace
  value:
    path: /concourse/*
    actors: [ uaa-client:concourse-to-credhub ]
    operations: [ read ]

- path: /variables/name=concourse-to-credhub-client-secret?
  type: replace
  value:
    name: concourse-to-credhub-client-secret
    type: password



# ------------------------------------- #
# Database TLS for ATC, CredHub and UAA #
# ------------------------------------- #


- path: /instance_groups/name=web/jobs/name=web/properties/postgresql/sslmode?
  type: replace
  value: verify-ca

- path: /instance_groups/name=web/jobs/name=web/properties/postgresql/ca_cert?
  type: replace
  value: ((concourse-internal-ca))


- path: /instance_groups/name=credhub/jobs/name=credhub/properties/credhub/data_storage/require_tls?
  type: replace
  value: true

- path: /instance_groups/name=credhub/jobs/name=credhub/properties/credhub/data_storage/tls_ca?
  type: replace
  value: ((database-tls.ca))

# - path: /instance_groups/name=credhub/jobs/name=pre-start-script?
#   type: replace
#   value:
#     # NOTE: UAA database schema upgrades require the PostgreSQL root CA
#     # certificate to be in '/home/vcap/.postgresql/root.crt'
#     name: pre-start-script
#     release: os-conf
#     properties:
#       script: |
#         #!/usr/bin/env bash
#         set -ex
#         mkdir -p /home/vcap/.postgresql
#         chown vcap:vcap /home/vcap/.postgresql
#         cat > /home/vcap/.postgresql/root.crt <<EOF
#         ((database-tls.ca))
#         EOF
#         chown vcap:vcap /home/vcap/.postgresql/root.crt


- path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaadb/tls_enabled?
  type: replace
  # Note: enabling this requires the CA cert to be in
  # /usr/local/share/ca-certificates, as the 'ca_cert' job of 'os-conf'
  # release does above.
  value: true

- path: /instance_groups/name=uaa/jobs/name=pre-start-script?
  type: replace
  value:
    # NOTE: UAA database schema upgrades require the PostgreSQL root CA
    # certificate to be in '/home/vcap/.postgresql/root.crt'
    name: pre-start-script
    release: os-conf
    properties:
      script: |
        #!/usr/bin/env bash
        set -ex
        mkdir -p /home/vcap/.postgresql
        chown vcap:vcap /home/vcap/.postgresql
        cat > /home/vcap/.postgresql/root.crt <<EOF
        ((database-tls.ca))
        EOF
        chown vcap:vcap /home/vcap/.postgresql/root.crt


- path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaadb/skip_ssl_validation?
  type: replace
  value: false

- path: /instance_groups/name=db/jobs/name=postgres/properties/databases/tls?
  type: replace
  value: # ((database-tls)) # <-- woud work with --vars-store, but doesn't with Credhub
    ca: ((database-tls.ca))
    certificate: ((database-tls.certificate))
    private_key: ((database-tls.private_key))


- path: /variables/name=database-tls?
  type: replace
  value:
    name: database-tls
    type: certificate
    options:
      ca: concourse-internal-ca
      common_name: q-s0.db.((network_name)).((deployment_name)).bosh
      alternative_names:
        - q-s0.db.((network_name)).((deployment_name)).bosh
        - 127.0.0.1
    update_mode: converge
