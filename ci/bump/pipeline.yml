---

jobs:
  - name: detect-concourse
    serial: true
    serial_groups: [ detect ]
    plan:
      - in_parallel:
          - get: concourse-deployment-tag
            trigger: true
          - get: concourse-turbine
          - get: image
          - get: yasak
          - get: gk-automation

      - task: bump-concourse-version
        image: image
        input_mapping:
          git-tag-repo: concourse-deployment-tag
          git: concourse-turbine
        params:
          SPEC_FILE: deployments/concourse/conf/spec.yml
          INPUT_RESOURCE_NAME: concourse-deployment
          RELEASE_HUMAN_NAME: Concourse
          GIT_COMMIT_NAME: ((git_commit_name))
          GIT_COMMIT_EMAIL: ((git-commit-email))
        config:
          platform: linux
          inputs:
            - name: git-tag-repo
            - name: git
            - name: yasak
          outputs:
            - name: git-bumped
          caches:
            - path: /usr/local/src/github.com/gstackio/yasak
          run:
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail -x

                go get github.com/gstackio/yasak
                sed -i 's|sed -e|sed -i -e|' "yasak/example-edit-value.sh"
                cp "yasak/example-edit-value.sh" "/usr/local/bin/update-yaml-value"

                latest_tag=$(git -C "git-tag-repo" describe --tags)
                echo "tag: ${latest_tag}"

                git clone "git" "git-bumped"

                pushd "git-bumped" > /dev/null

                    update-yaml-value \
                        "${SPEC_FILE}" \
                        "/input_resources/name=${INPUT_RESOURCE_NAME}/version" \
                        "${latest_tag}"

                    git config --global "color.ui" "always"
                    git status
                    git diff | cat

                    git config --global "user.name" "${GIT_COMMIT_NAME}"
                    git config --global "user.email" "${GIT_COMMIT_EMAIL}"

                    if [[ -z "$(git status --porcelain)" ]]; then
                        echo "INFO: nothing to commit. Skipping."
                    else
                        git add .
                        git commit -m "Bump ${RELEASE_HUMAN_NAME} to ${latest_tag}"
                    fi
                popd > /dev/null

      - task: git-push
        image: image
        file: gk-automation/boshrelease/git-push.yml
        input_mapping:
          repo: git-bumped
        params:
          BRANCH_NAME: master
          GIT_URI: ((git_uri))
          GITHUB_PRIVATE_KEY: ((github-private-key))

  - name: detect-os-conf
    serial: true
    serial_groups: [ detect ]
    plan:
      - in_parallel:
          - get: os-conf-bosh-io-release
            trigger: true
            params: { tarball: false }
          - get: concourse-turbine
          - get: image
          - get: yasak
          - get: gk-automation

      - task: bump-os-conf-version
        image: image
        file: concourse-turbine/ci/bump/tasks/bump-bosh-release.yml
        input_mapping:
          bosh-io-release: os-conf-bosh-io-release
          git: concourse-turbine
        params:
          SPEC_FILE: deployments/concourse/conf/spec.yml
          YAML_PROP_PREFIX: os_conf
          RELEASE_HUMAN_NAME: OS Conf BOSH Release
          GIT_COMMIT_NAME: ((git_commit_name))
          GIT_COMMIT_EMAIL: ((git-commit-email))

      - task: git-push
        image: image
        file: gk-automation/boshrelease/git-push.yml
        input_mapping:
          repo: git-bumped
        params:
          BRANCH_NAME: master
          GIT_URI: ((git_uri))
          GITHUB_PRIVATE_KEY: ((github-private-key))

  - name: detect-credhub
    serial: true
    serial_groups: [ detect ]
    plan:
      - in_parallel:
          - get: credhub-bosh-io-release
            trigger: true
            params: { tarball: false }
          - get: concourse-turbine
          - get: image
          - get: yasak
          - get: gk-automation

      - task: bump-credhub-version
        image: image
        file: concourse-turbine/ci/bump/tasks/bump-bosh-release.yml
        input_mapping:
          bosh-io-release: credhub-bosh-io-release
          git: concourse-turbine
        params:
          SPEC_FILE: deployments/concourse/conf/spec.yml
          YAML_PROP_PREFIX: credhub
          RELEASE_HUMAN_NAME: Credhub BOSH Release
          GIT_COMMIT_NAME: ((git_commit_name))
          GIT_COMMIT_EMAIL: ((git-commit-email))

      - task: git-push
        image: image
        file: gk-automation/boshrelease/git-push.yml
        input_mapping:
          repo: git-bumped
        params:
          BRANCH_NAME: master
          GIT_URI: ((git_uri))
          GITHUB_PRIVATE_KEY: ((github-private-key))

  - name: detect-uaa
    serial: true
    serial_groups: [ detect ]
    plan:
      - in_parallel:
          - get: uaa-bosh-io-release
            trigger: true
            params: { tarball: false }
          - get: concourse-turbine
          - get: image
          - get: yasak
          - get: gk-automation

      - task: bump-uaa-version
        image: image
        file: concourse-turbine/ci/bump/tasks/bump-bosh-release.yml
        input_mapping:
          bosh-io-release: uaa-bosh-io-release
          git: concourse-turbine
        params:
          SPEC_FILE: deployments/concourse/conf/spec.yml
          YAML_PROP_PREFIX: uaa
          RELEASE_HUMAN_NAME: UAA BOSH Release
          GIT_COMMIT_NAME: ((git_commit_name))
          GIT_COMMIT_EMAIL: ((git-commit-email))

      - task: git-push
        image: image
        file: gk-automation/boshrelease/git-push.yml
        input_mapping:
          repo: git-bumped
        params:
          BRANCH_NAME: master
          GIT_URI: ((git_uri))
          GITHUB_PRIVATE_KEY: ((github-private-key))

  - name: detect-bbr
    serial: true
    serial_groups: [ detect ]
    plan:
      - in_parallel:
          - get: bbr-bosh-io-release
            trigger: true
            params: { tarball: false }
          - get: concourse-turbine
          - get: image
          - get: yasak
          - get: gk-automation

      - task: bump-bbr-version
        image: image
        file: concourse-turbine/ci/bump/tasks/bump-bosh-release.yml
        input_mapping:
          bosh-io-release: bbr-bosh-io-release
          git: concourse-turbine
        params:
          SPEC_FILE: deployments/concourse/conf/spec.yml
          YAML_PROP_PREFIX: bbr_sdk
          RELEASE_HUMAN_NAME: BBR BOSH Release
          GIT_COMMIT_NAME: ((git_commit_name))
          GIT_COMMIT_EMAIL: ((git-commit-email))

      - task: git-push
        image: image
        file: gk-automation/boshrelease/git-push.yml
        input_mapping:
          repo: git-bumped
        params:
          BRANCH_NAME: master
          GIT_URI: ((git_uri))
          GITHUB_PRIVATE_KEY: ((github-private-key))

  - name: detect-traefik
    serial: true
    serial_groups: [ detect ]
    plan:
      - in_parallel:
          - get: traefik-boshrelease-gh-release
            trigger: true
            params: { globs: [ traefik-*.tgz ] }
          - get: concourse-turbine
          - get: image
          - get: yasak
          - get: gk-automation

      - task: bump-traefik-version
        image: image
        input_mapping:
          github-release: traefik-boshrelease-gh-release
          git: concourse-turbine
        params:
          SPEC_FILE: deployments/traefik/conf/spec.yml
          INPUT_RESOURCE_NAME: traefik-boshrelease
          SPEC_FILE2: deployments/concourse/conf/spec.yml
          YAML_PROP_PREFIX: traefik
          RELEASE_HUMAN_NAME: Traefik BOSH Release
          GIT_COMMIT_NAME: ((git_commit_name))
          GIT_COMMIT_EMAIL: ((git-commit-email))
        config:
          platform: linux
          inputs:
            - name: github-release
            - name: git
            - name: yasak
          outputs:
            - name: git-bumped
          caches:
            - path: /usr/local/src/github.com/gstackio/yasak
          run:
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail -x

                go get github.com/gstackio/yasak
                sed -i 's|sed -e|sed -i -e|' "yasak/example-edit-value.sh"
                cp "yasak/example-edit-value.sh" "/usr/local/bin/update-yaml-value"

                tag=$(< github-release/tag)
                version=$(< github-release/version)
                sha1=$(shasum -a 1 github-release/traefik-*.tgz | cut -d" " -f1)

                git clone "git" "git-bumped"

                pushd "git-bumped" > /dev/null
                    update-yaml-value \
                        "${SPEC_FILE}" \
                        "/input_resources/name=${INPUT_RESOURCE_NAME}/version" \
                        "${tag}"

                    update-yaml-value \
                        "${SPEC_FILE2}" \
                        "/deployment_vars/${YAML_PROP_PREFIX}_version" \
                        "\"${version}\""

                    update-yaml-value \
                        "${SPEC_FILE2}" \
                        "/deployment_vars/${YAML_PROP_PREFIX}_sha1" \
                        "${sha1}"

                    git config --global "color.ui" "always"
                    git status
                    git diff | cat

                    git config --global "user.name" "${GIT_COMMIT_NAME}"
                    git config --global "user.email" "${GIT_COMMIT_EMAIL}"

                    if [[ -z "$(git status --porcelain)" ]]; then
                        echo "INFO: nothing to commit. Skipping."
                    else
                        git add .
                        git commit -m "Bump ${RELEASE_HUMAN_NAME} to version ${version}"
                    fi
                popd > /dev/null

      - task: git-push
        image: image
        file: gk-automation/boshrelease/git-push.yml
        input_mapping:
          repo: git-bumped
        params:
          BRANCH_NAME: master
          GIT_URI: ((git_uri))
          GITHUB_PRIVATE_KEY: ((github-private-key))

  - name: detect-warden-stemcell
    serial: true
    serial_groups: [ detect ]
    plan:
      - in_parallel:
          - get: warden-stemcell
            trigger: true
            params: { tarball: false }
          - get: concourse-turbine
          - get: image
          - get: yasak
          - get: gk-automation

      - task: bump-warden-stemcell-version
        image: image
        file: concourse-turbine/ci/bump/tasks/bump-bosh-release.yml
        input_mapping:
          bosh-io-release: warden-stemcell
          git: concourse-turbine
        params:
          SPEC_FILE: deployments/traefik/conf/spec.yml
          YAML_PROP_PREFIX: stemcell
          RELEASE_HUMAN_NAME: Warden BOSH-Lite Stemcell
          GIT_COMMIT_NAME: ((git_commit_name))
          GIT_COMMIT_EMAIL: ((git-commit-email))

      - task: git-push
        image: image
        file: gk-automation/boshrelease/git-push.yml
        input_mapping:
          repo: git-bumped
        params:
          BRANCH_NAME: master
          GIT_URI: ((git_uri))
          GITHUB_PRIVATE_KEY: ((github-private-key))


resources:

  - name: image
    type: docker-image
    icon: docker
    source:
      repository: ((docker_ops_image_repo))
      username: ((docker_registry_username))
      password: ((docker-registry-password))

  - name: gk-automation
    type: git
    icon: github
    source:
      uri: git@github.com:gstackio/gk-automation.git
      branch: master
      private_key: ((github-private-key))

  - name: concourse-turbine
    type: git
    icon: github
    source:
      uri: ((git_uri))
      branch: master
      private_key: ((github-private-key))

  - name: yasak
    type: git
    icon: github
    source:
      uri: git@github.com:gstackio/yasak.git
      branch: master
      private_key: ((github-private-key))

  - name: concourse-deployment-tag
    type: git
    icon: github
    source:
      uri: git@github.com:concourse/concourse-bosh-deployment.git
      branch: master
      tag_filter: ((concourse_version_constraint))
      private_key: ((github-private-key))

  - name: os-conf-bosh-io-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/os-conf-release

  - name: credhub-bosh-io-release
    type: bosh-io-release
    source:
      repository: pivotal-cf/credhub-release

  - name: uaa-bosh-io-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/uaa-release

  - name: bbr-bosh-io-release
    type: bosh-io-release
    source:
      repository: cloudfoundry-incubator/backup-and-restore-sdk-release

  - name: traefik-boshrelease-gh-release
    type: github-release
    icon: github
    source:
      owner: gstackio
      repository: traefik-boshrelease
      pre_release: false
      tag_filter: v(\d+\.\d+\.\d+)
      access_token: ((github-access-token))

  - name: warden-stemcell
    type: bosh-io-stemcell
    source:
      name: bosh-warden-boshlite-ubuntu-xenial-go_agent
      version_family: ((stemcell_version_constraint))

resource_types:
  - name: keyval
    type: docker-image
    source:
      repository: harbor.ci.gstack.io/swce/keyval-resource
      username: ((docker_registry_username))
      password: ((docker-registry-password))
